Spring事务

[★★]事务的四个特性(ACID)
原子性(Atomicity): 事务是一个原子操作, 由一系列动作组成. 事务的原子性确保动作要么全部完成, 要么完全不起作用
一致性(Consistency): 一旦事务完成(不管成功还是失败), 系统必须确保它所建模的业务处于一致的状态, 而不会是部分完成部分失败. 在现实中的数据不应该被破坏
隔离性(Isolation): 可能有许多事务会同时处理相同的数据, 因此每个事务都应该与其他事务隔离开来, 防止数据损坏
持久性(Durability): 一旦事务完成, 无论发生什么系统错误, 它的结果都不应该受到影响, 这样就能从任何系统崩溃中恢复过来. 通常情况下, 事务的结果被写到持久化存储器中


[★]Spring并不直接管理事务, 而是提供了接口: org.springframework.transaction.PlatformTransactionManager, 通过这个接口, Spring为各个平台如JDBC, Hibernate等都提供了对应的事务管理器, 由各个平台自己实现功能. 接口定义如下
Public interface PlatformTransactionManager()...{  
    // 由TransactionDefinition得到TransactionStatus对象
    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; 
    // 提交
    Void commit(TransactionStatus status) throws TransactionException;  
    // 回滚
    Void rollback(TransactionStatus status) throws TransactionException;  
}

[★]JDBC事务: org.springframework.jdbc.datasource.DataSourceTransactionManager, 需要DataSource


[★★]事务的基本属性
传播行为, 隔离级别, 是否只读, 超时时间, 回滚规则


[★★★]传播行为

假设有如下AB两个方法, 考虑以下两种情况下事务状态, B单独运行, A单独运行
A: A方法运行的时候会开启一个事务, 根据methodB的事务传播行为确定methodA中methodB的运行方式
@Transactional(propagation = Propagation.REQUIRED)
public void methodA() {
	...
	methodB();
	...
}
B:
@Transactional(propagation = 7种定义的传播行为)
public void methodB() {
	...
}

1.PROPAGATION_REQUIRED: 表示方法必须运行在事务中. 如果事务存在, 方法将会在该事务中运行. 否则, 会启动一个新的事务
2.PROPAGATION_SUPPORTS: 表示方法不需要事务上下文, 但是如果存在事务的话, 那么该方法会在这个事务中运行
3.PROPAGATION_MANDATORY: 表示方法必须在事务中运行, 如果事务不存在, 则会抛出一个异常
4.PROPAGATION_REQUIRED_NEW: 表示方法必须运行在它自己的事务中. 一个新的事务将被启动. 如果存在当前事务, 在该方法执行期间, 当前事务会被挂起. 两个事务互不影响, 各提交各的, 各回滚个的
5.PROPAGATION_NOT_SUPPORTED: 表示方法不应该运行在事务中. 如果存在当前事务, 在该方法运行期间, 当前事务将被挂起
6.PROPAGATION_NEVER: 表示方法不应该运行在事务中. 如果当前正有一个事务在运行, 则会抛出异常	
7.PROPAGATION_NESTED: 表示如果当前已经存在一个事务, 那么该方法将会在嵌套事务中运行. 嵌套的事务可以独立于当前事务进行单独地提交或回滚. 如果当前不存在事务, 那么其行为与PROPAGATION_REQUIRED一样. 嵌套事务是一个非常重要的概念, 就是内层事务依赖于外层事务. 外层事务失败时, 会回滚内层事务所做的动作. 而内层事务操作失败并不会引起外层事务的回滚. 

[★★]并发事务引起的问题
1.脏读(Dirty read): 脏读发生在一个事务读取了另一个事务改写但尚未提交的数据时. 如果改写在稍后被回滚了, 那么第一个事务获取的数据就是无效的
2.不可重复读(Nonrepeatable read)(重点是修改): 不可重复读发生在一个事务执行相同的查询两次或两次以上, 但是每次都得到不同的数据时. 这通常是因为另一个并发事务在两次查询期间进行了更新
3.幻读(Phantom read)(重点是新增/删除): 它发生在一个事务(T1)读取了几行数据, 接着另一个并发事务(T2)插入了一些数据时. 在随后的查询中, 第一个事务(T1)就会发现多了一些原本不存在的记录
4.丢失更新: 当两个或多个事务选择同一数据, 并且基于最初选定的值更新该数据时, 会发生该问题. 每个事务都不知道其它事务的存在, 最后的更新将重写由其它事务所做的更新, 这将导致数据丢失. 例子: 两个事务同时执行先查询后更新的操作

从总的结果来看, 似乎不可重复读和幻读都表现为两次读取的结果不一致. 但如果你从控制的角度来看, 两者的区别就比较大.  
对于前者, 只需要锁住满足条件的记录.  
对于后者, 要锁住满足条件及其相近的记录. 


[★★★]隔离级别: 定义了一个事务可能受其他并发事务影响的程度

1.ISOLATION_DEFAULT: 使用后端数据库默认的隔离级别
2.ISOLATION_READ_UNCOMMITTED(读未提交): 最低的隔离级别, 允许读取尚未提交的数据变更, 可能会导致脏读、幻读或不可重复读
3.ISOLATION_READ_COMMITTED(读已提交): 允许读取并发事务已经提交的数据, 可以阻止脏读, 但是幻读或不可重复读仍有可能发生
4.ISOLATION_REPEATABLE_READ(重复读): 对同一字段的多次读取结果都是一致的, 除非数据是被本身事务自己所修改, 可以阻止脏读和不可重复读, 但幻读仍有可能发生
5.ISOLATION_SERIALIZABLE(串行化): 最高的隔离级别, 完全服从ACID的隔离级别, 确保阻止脏读、不可重复读以及幻读, 也是最慢的事务隔离级别, 因为它通常是通过完全锁定事务相关的数据库表来实现的

[★★★]问题解决表
-------------------------------
|		 |脏读|不可重复读|幻读|
-------------------------------
|读未提交|    |          |    |
-------------------------------	
|读已提交| √  |          |    |
-------------------------------
|可重复读| √  | √        |    |
-------------------------------
|串行化读| √  | √        | √  |
-------------------------------


[★★]只读
如果事务只对后端的数据库进行该操作, 数据库可以利用事务的只读特性来进行一些特定的优化. 通过将事务设置为只读, 你就可以给数据库一个机会, 让它应用它认为合适的优化措施. 


[★★]超时
为了使应用程序很好地运行, 事务不能运行太长的时间. 因为事务可能涉及对后端数据库的锁定, 所以长时间的事务会不必要的占用数据库资源. 事务超时就是事务的一个定时器, 在特定时间内事务如果没有执行完毕, 那么就会自动回滚, 而不是一直等待其结束. 


[★★]回滚规则
定义了哪些异常会导致事务回滚而哪些不会. 默认情况下, 事务只有遇到运行时异常时才会回滚, 而在遇到检查型异常时不会回滚, 
但是你可以声明事务在遇到特定的检查型异常时像遇到运行期异常那样回滚. 同样, 你还可以声明事务遇到特定的异常不回滚, 即使这些异常是运行期异常. 

异常
Throwable
|        |
Error    Exception
|        |      |
...      ...    RuntimeException

异常(包括Exception和Error)分为可查的异常(checked exceptions)和不可查的异常(unchecked exceptions).
1.可查异常(编译器要求必须处置的异常): 除了RuntimeException及其子类以外, 其他的Exception类及其子类都属于可查异常
2.不可查异常(编译器不要求强制处置的异常):包括运行时异常(RuntimeException及其子类)和错误(Error)

Exception分两大类运行时异常和非运行时异常(编译异常).程序中应当尽可能去处理这些异常
1.运行时异常(编译器不会检查): RuntimeException类及其子类, 一般是由程序逻辑错误引起的
空指针, 下标越界, 非法参数, 类转换异常(ClassCastException), 数字格式, 算术运算异常(ArithmeticException), ...
2.非运行时异常(编译器要求必须处置的异常): RuntimeException以外的异常
IOException, SQLException, ...





一些常见情景及解决方案

1.请求的异步回调通知处理(先查询后更新)
描述: 请求的第一次异步回调通知还在处理中但是第二次异步回调通知已经到了, 这种情况并不是很多
方案: a.悲观锁, 先查询(select ... for update, 只锁一条数据, 不会对别的数据造成影响), 若满足条件则更新
     b.乐观锁, 因为这里方法的逻辑会比较长, 乐观锁
代码结构: 
public String xxx(xxx, xxx) {
	select;
	if(已更新) {
		return success;
	}
	执行各种逻辑;
	return success;
}

2.购票(先查询后更新)
描述: 大家都能看到余票, 但是手快有手慢无
方案: a.票数字段加check约束(count>0), 然后购票方法不查余票, 直接更新count=count-1, 成功则购票成功, 报错则购票失败
     b.悲观锁, 访问量大的时候会有巨大的性能问题
		// 悲观锁
		@Select("select * from ticket where id = #{id} for update")
		Ticket selectByIdForUpdate(Integer id);
     c.乐观锁, 
		// 乐观锁, ticket是更新之前查出来的ticket, 这里传入的 version = ticket.getVersion() + ticket.getCount()
		@Update("update ticket set count=count-1, version=version+1 where id = 1 and version < #{version}")
		int updateByIdAndVersion(@Param("id") Integer id, @Param("version") long version);
     

